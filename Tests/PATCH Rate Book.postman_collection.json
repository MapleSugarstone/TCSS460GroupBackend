{
	"info": {
		"_postman_id": "dea2155e-a5d4-4796-bbd2-bada2a4e15f1",
		"name": "PATCH Rate Book",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39307490",
		"_collection_link": "https://tcss-backend-project.postman.co/workspace/TCSS-Backend-Project-Workspace~5d0dbd3c-aaa7-4d5b-923f-b6e25dd456e6/collection/38937002-dea2155e-a5d4-4796-bbd2-bada2a4e15f1?action=share&source=collection_link&creator=39307490"
	},
	"item": [
		{
			"name": "Fail - No Auth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 5) + 1;",
							"pm.environment.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.not.have.ownProperty(\"accessToken\");",
							"    pm.expect(body).to.not.have.ownProperty(\"id\");",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Auth token is not supplied\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(401);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate/?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate",
						""
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - Invalid Auth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 5) + 1;",
							"pm.environment.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.not.have.ownProperty(\"accessToken\");",
							"    pm.expect(body).to.not.have.ownProperty(\"id\");",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Token is not valid\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(403);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123456",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate/?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate",
						""
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register For Auth Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {\r",
							"    const body = pm.response.json()\r",
							"    pm.expect(body).to.have.ownProperty(\"accessToken\");\r",
							"    pm.expect(body).to.have.ownProperty(\"id\");\r",
							"})\r",
							"pm.globals.set(\"jwt\", pm.response.json().accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\",\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"role\": \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book to Use",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random 13-digit ISBN number",
							"const randomISBN13 = Math.floor(Math.random() * 1e10).toString().padStart(10, '0');",
							"pm.collectionVariables.set(\"randomISBN13\", `978${randomISBN13}`);",
							"",
							"// Define the range for the publication year",
							"const currentYear = new Date().getFullYear();",
							"const maxYear = currentYear + 5;",
							"",
							"// Generate a random year between 0 and maxYear",
							"const publication_year = Math.floor(Math.random() * (maxYear + 1));",
							"pm.environment.set(\"randomPublicationYear\", `${publication_year}`);",
							"",
							"//Generate a random rating value",
							"const randomRating = Math.floor(Math.random() * 87).toString();",
							"pm.environment.set(\"random\", `${randomRating}`);",
							"",
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 100) + 20;",
							"pm.environment.set(\"randomInt\", randomInt);",
							"",
							"// Generate another random int",
							"const randomInt2 = Math.floor(Math.random() * 100) + 20;",
							"pm.environment.set(\"randomInt2\", randomInt2);",
							"",
							"// Generate another random int",
							"const randomInt3 = Math.floor(Math.random() * 100) + 20;",
							"pm.environment.set(\"randomInt3\", randomInt3);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"New book record successfully created.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(201);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"isbn13\": \"{{randomISBN13}}\",\n    \"authors\": \"{{$randomLastName}}\",\n    \"publication_year\": {{randomPublicationYear}},\n    \"title\": \"{{$randomWord}}\",\n    \"rating_1_star\": \"{{randomInt}}\",\n    \"rating_2_star\": \"{{randomInt2}}\",\n    \"rating_3_star\": \"{{randomInt3}}\",\n    \"rating_4_star\": \"{{randomInt}}\",\n    \"rating_5_star\": 0,\n    \"image_url\": \"{{$randomBusinessImage}}\",\n    \"image_small_url\": \"{{$randomNightlifeImage}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/new",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"new"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 4) + 1;",
							"pm.collectionVariables.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Sucessfully updated book ratings.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate/{{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate",
						"{{randomISBN13}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success W/Remove F",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 4) + 1;",
							"pm.collectionVariables.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Sucessfully updated book ratings.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate/?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate",
						""
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success W/Remove T",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 4) + 1;",
							"pm.collectionVariables.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Sucessfully updated book ratings.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate"
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - Invalid ISBN Format",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 4) + 1;",
							"pm.collectionVariables.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Invalid or missing rating.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(400);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate?isbn13=      {{randomISBN13}}     ",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate"
					],
					"query": [
						{
							"key": "isbn13",
							"value": "      {{randomISBN13}}     "
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - No Rating",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Invalid or missing rating.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(400);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"remove\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate"
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - Invalid Rating",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Invalid or missing rating.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(400);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": \"hello\",\n    \"remove\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate"
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - Negative Rating",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = -1 * Math.floor(Math.random() * 4) + 1;",
							"pm.collectionVariables.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Invalid or missing rating.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(400);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate"
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - Too Large Rating",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 4) + 6;",
							"pm.collectionVariables.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Invalid or missing rating.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(400);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate"
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - Invalid Remove",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"A star rating cannot have a negative count - Consider setting remove to false.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(400);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": 5,\n    \"remove\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate/{{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate",
						"{{randomISBN13}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - Invalid ISBN",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 5) + 1;",
							"pm.collectionVariables.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Invalid or missing ISBN - The provided ISBN must be a 13-digit numeric string.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(400);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate/123456",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate",
						"123456"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Book Being Used",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message.message).to.equal(\"Book successfully deleted\");",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/isbn/?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"isbn",
						""
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - No Such ISBN",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random star rating",
							"const randomStars = Math.floor(Math.random() * 5) + 1;",
							"pm.collectionVariables.set(\"randomStars\", randomStars);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Book not found - No book matches the provided ISBN.\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(404);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"stars\": {{randomStars}},\n    \"remove\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/rate?isbn13={{randomISBN13}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"rate"
					],
					"query": [
						{
							"key": "isbn13",
							"value": "{{randomISBN13}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "jwt",
			"value": ""
		},
		{
			"key": "randomISBN13",
			"value": "",
			"type": "default"
		},
		{
			"key": "randomStars",
			"value": ""
		}
	]
}