{
	"info": {
		"_postman_id": "cfa7a4c7-66bc-423a-9fa9-7d62cff56f66",
		"name": "GET All Paginate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39307490",
		"_collection_link": "https://tcss-backend-project.postman.co/workspace/TCSS-Backend-Project-Workspace~5d0dbd3c-aaa7-4d5b-923f-b6e25dd456e6/collection/38937002-cfa7a4c7-66bc-423a-9fa9-7d62cff56f66?action=share&source=collection_link&creator=39307490"
	},
	"item": [
		{
			"name": "Fail - No Auth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.not.have.ownProperty(\"accessToken\");",
							"    pm.expect(body).to.not.have.ownProperty(\"id\");",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Auth token is not supplied\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(401);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?limit=10&offset=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Fail - Invalid Auth",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json()",
							"    pm.expect(body).to.not.have.ownProperty(\"accessToken\");",
							"    pm.expect(body).to.not.have.ownProperty(\"id\");",
							"    pm.expect(body).to.have.ownProperty(\"message\");",
							"    pm.expect(body.message).to.equal(\"Token is not valid\")",
							"})",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(403);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "123456",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?limit=10&offset=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Register For Auth Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {\r",
							"    const body = pm.response.json()\r",
							"    pm.expect(body).to.have.ownProperty(\"accessToken\");\r",
							"    pm.expect(body).to.have.ownProperty(\"id\");\r",
							"})\r",
							"pm.globals.set(\"jwt\", pm.response.json().accessToken);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\",\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"role\": \"1\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(10);",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(10);",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(0);",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(10);",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?limit=10&offset=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success Random Limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 40) + 1;",
							"pm.environment.set(\"randomLimit\", randomInt);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(pm.environment.get(\"randomLimit\"));",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(pm.environment.get(\"randomLimit\"));",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(0);",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomLimit\"));",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?limit={{randomLimit}}&offset=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{randomLimit}}"
						},
						{
							"key": "offset",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success Random Offset",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 30);",
							"pm.environment.set(\"randomOffset\", randomInt);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(10);",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(10);",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(pm.environment.get(\"randomOffset\"));",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomOffset\") + 10);",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?limit=10&offset={{randomOffset}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "limit",
							"value": "10"
						},
						{
							"key": "offset",
							"value": "{{randomOffset}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success Random Limit And Offset",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 20) + 1;",
							"pm.environment.set(\"randomLimit\", randomInt);",
							"// Generate a random int",
							"const randomInt2 = Math.floor(Math.random() * 20);",
							"pm.environment.set(\"randomOffset\", randomInt2);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(pm.environment.get(\"randomLimit\"));",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(pm.environment.get(\"randomLimit\"));",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(pm.environment.get(\"randomOffset\"));",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomOffset\") + pm.environment.get(\"randomLimit\"));",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?limit={{randomLimit}}&offset={{randomOffset}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{randomLimit}}"
						},
						{
							"key": "offset",
							"value": "{{randomOffset}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success No Limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 20);",
							"pm.environment.set(\"randomOffset\", randomInt);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(10);",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(10);",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(pm.environment.get(\"randomOffset\"));",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomOffset\") + 10);",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?offset={{randomOffset}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{randomOffset}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success No Offset",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 20) + 1;",
							"pm.environment.set(\"randomLimit\", randomInt);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(pm.environment.get(\"randomLimit\"));",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(pm.environment.get(\"randomLimit\"));",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(0);",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomLimit\"));",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?limit={{randomLimit}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{randomLimit}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success No Limit Or Offset",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(10);",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(10);",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(0);",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(10);",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Success Invalid Limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 20);",
							"pm.environment.set(\"randomOffset\", randomInt);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(10);",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(10);",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(pm.environment.get(\"randomOffset\"));",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomOffset\") + 10);",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?offset={{randomOffset}}&limit=hello",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{randomOffset}}"
						},
						{
							"key": "limit",
							"value": "hello"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success Negative Limit",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 20);",
							"pm.environment.set(\"randomOffset\", randomInt);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(10);",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(10);",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(pm.environment.get(\"randomOffset\"));",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomOffset\") + 10);",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?offset={{randomOffset}}&limit=-6",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "offset",
							"value": "{{randomOffset}}"
						},
						{
							"key": "limit",
							"value": "-6"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success Invalid Offset",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 20) + 1;",
							"pm.environment.set(\"randomLimit\", randomInt);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(pm.environment.get(\"randomLimit\"));",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(pm.environment.get(\"randomLimit\"));",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(0);",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomLimit\"));",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?offset=hello&limit={{randomLimit}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "offset",
							"value": "hello"
						},
						{
							"key": "limit",
							"value": "{{randomLimit}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Success Negative Offset",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generate a random int",
							"const randomInt = Math.floor(Math.random() * 20) + 1;",
							"pm.environment.set(\"randomLimit\", randomInt);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has expected elements\", () => {",
							"    const body = pm.response.json();",
							"    pm.expect(body).to.have.property(\"books\");",
							"    pm.expect(body.books.length).to.equal(pm.environment.get(\"randomLimit\"));",
							"    bookProperties(body.books);",
							"    pm.expect(body).to.have.property(\"pagination\");",
							"    pm.expect(body.pagination).to.have.property(\"totalRecords\");",
							"    pm.expect(body.pagination).to.have.property(\"limit\");",
							"    pm.expect(body.pagination.limit).to.equal(pm.environment.get(\"randomLimit\"));",
							"    pm.expect(body.pagination).to.have.property(\"offset\");",
							"    pm.expect(body.pagination.offset).to.equal(0);",
							"    pm.expect(body.pagination).to.have.property(\"nextPage\");",
							"    pm.expect(body.pagination.nextPage).to.equal(pm.environment.get(\"randomLimit\"));",
							"});",
							"",
							"pm.test(\"Response is Success\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"function bookProperties(books) {",
							"    for(let index = 0; index < books.length; index++) {",
							"        pm.expect(books[index]).to.have.property(\"isbn13\");",
							"        pm.expect(books[index]).to.have.property(\"authors\");",
							"        pm.expect(books[index]).to.have.property(\"publication\");",
							"        pm.expect(books[index]).to.have.property(\"title\");",
							"        pm.expect(books[index]).to.have.property(\"ratings\");",
							"        ratingProperties(books[index].ratings);",
							"        pm.expect(books[index]).to.have.property(\"icons\");",
							"        pm.expect(books[index].icons).to.have.property(\"large\");",
							"        pm.expect(books[index].icons).to.have.property(\"small\");",
							"    }",
							"}",
							"",
							"function ratingProperties(ratings) {",
							"    pm.expect(ratings).to.have.property(\"average\");",
							"    pm.expect(ratings).to.have.property(\"count\");",
							"    pm.expect(ratings.count).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_1\");",
							"    pm.expect(ratings.rating_1).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_2\");",
							"    pm.expect(ratings.rating_2).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_3\");",
							"    pm.expect(ratings.rating_3).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_4\");",
							"    pm.expect(ratings.rating_4).to.be.at.least(0);",
							"    pm.expect(ratings).to.have.property(\"rating_5\");",
							"    pm.expect(ratings.rating_5).to.be.at.least(0);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/books/all?offset=-6&limit={{randomLimit}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"books",
						"all"
					],
					"query": [
						{
							"key": "offset",
							"value": "-6"
						},
						{
							"key": "limit",
							"value": "{{randomLimit}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}